{"version":3,"sources":["webpack:///./src/components/carousel.tsx","webpack:///./src/components/workView.tsx"],"names":["Container","styled","div","ArrowsContainer","ImageContainer","Carousel","props","images","React","useState","current","setCurrent","isReversing","setIsReversing","handleClick","direction","newCurrent","length","transitions","useTransition","item","from","transform","enter","leave","position","map","key","style","fluid","childImageSharp","className","onClick","Info","a","query","WorkView","data","worksJson","title","description","slug","additionalInfo","isShowInfo","pageTitle","useDeviceDetect","isMobile","opacity","split","console","log","line","i"],"mappings":"kPASMA,EAAYC,IAAOC,IAAV,0EAAGD,CAAH,iCAKTE,EAAkBF,IAAOC,IAAV,gFAAGD,CAAH,0IAafG,EAAiBH,IAAOC,IAAV,+EAAGD,CAAH,MAkDLI,EAhDE,SAACC,GAAyB,IACjCC,EAAWD,EAAXC,OADiC,EAEXC,IAAMC,SAAS,GAAtCC,EAFkC,KAEzBC,EAFyB,OAGHH,IAAMC,UAAS,GAA9CG,EAHkC,KAGrBC,EAHqB,KAKnCC,EAAc,SAACC,GACnB,GAAkB,OAAdA,EAAoB,CACtB,IAAMC,GAAcN,EAAU,GAAKH,EAAOU,OAC1CN,EAAWK,GACXH,GAAe,QACV,GAAkB,SAAdE,EAAsB,CAC/B,IAAMC,EAAyB,IAAZN,EAAgBH,EAAOU,OAAS,EAAIP,EAAU,EACjEC,EAAWK,GACXH,GAAe,KAIbK,EAAcC,YAAc,CAACT,IAAU,SAAAU,GAAI,OAAIA,IAAM,CACzDC,KAAM,CACJC,UAAYV,EAAqC,sBAAvB,sBAE5BW,MAAO,CAAED,UAAW,mBACpBE,MAAO,CAAEC,SAAU,cAGrB,OACE,kBAACzB,EAAD,KACGkB,EAAYQ,KAAI,gBAAGN,EAAH,EAAGA,KAAMd,EAAT,EAASA,MAAOqB,EAAhB,EAAgBA,IAAhB,OACf,kBAAC,IAAEzB,IAAH,CAAOyB,IAAKA,EAAKC,MAAOtB,GACtB,kBAACF,EAAD,KACE,kBAAC,IAAD,CAAKyB,MAAOtB,EAAOa,GAAMU,gBAAgBD,aAI/C,kBAAC1B,EAAD,KACE,yBAAK4B,UAAU,UACb,yBAAKA,UAAU,kBAAkBC,QAAS,kBAAMlB,EAAY,UACzD,KAEH,yBAAKiB,UAAU,kBAAkBC,QAAS,kBAAMlB,EAAY,QACzD,SClDPd,EAAYC,IAAOC,IAAV,qEAAGD,CAAH,wIAcTgC,EAAOhC,YAAOiC,IAAEhC,KAAZ,gEAAGD,CAAH,uHAwFGkC,GAvEUlC,IAAOC,IAAV,0EAAGD,CAAH,mNAqELmC,UA/CE,SAAC9B,GAAyB,MAOrCA,EAAM+B,KAAKC,UALbC,EAFuC,EAEvCA,MACAC,EAHuC,EAGvCA,YACAjC,EAJuC,EAIvCA,OACAkC,EALuC,EAKvCA,KACAC,EANuC,EAMvCA,eANuC,EAQLjC,oBAAS,GAAtCkC,EARkC,KAiBnCC,GAjBmC,KASpBC,cAAbC,SAEY3B,YAAcwB,EAAY,KAAM,CAClDtB,KAAM,CAAE0B,QAAS,GACjBxB,MAAO,CAAEwB,QAAS,GAClBvB,MAAO,CAAEuB,QAAS,KAGFN,EAAKO,MAAM,KAAK,GAAGA,MAAM,KAAK,IAKhD,OAHAC,QAAQC,IAAI3C,GACZ0C,QAAQC,IAAIR,GAGV,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAKH,MAAOK,IACZ,4BAAKL,GACL,kBAAC,EAAD,CAAUhC,OAAQA,IAClB,kBAAC0B,EAAD,KACE,2BAAIO,GACJ,4CAEDE,GACC,kBAACT,EAAD,KACE,0CACA,yBAAKF,UAAU,WACZW,EAAeM,MAAM,MAAMtB,KAAI,SAACyB,EAAMC,GAAP,OAC9B,uBAAGzB,IAAKyB,GAAID,WAYP","file":"component---src-components-work-view-tsx-fa85fd21cf7865c07bff.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport Img, { FluidObject } from \"gatsby-image\"\nimport { useTransition, animated as a } from \"react-spring\"\n\ntype CarouselProps = {\n  images: [any]\n}\n\nconst Container = styled.div`\n  height: 80%;\n  overflow: hidden;\n`\n\nconst ArrowsContainer = styled.div`\n  display: flex;\n  font-size: 32px;\n  justify-content: flex-end;\n\n  .Arrows {\n    width: 100px;\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n  }\n`\n\nconst ImageContainer = styled.div``\n\nconst Carousel = (props: CarouselProps) => {\n  const { images } = props\n  const [current, setCurrent] = React.useState(0)\n  const [isReversing, setIsReversing] = React.useState(false)\n\n  const handleClick = (direction: string) => {\n    if (direction === \"up\") {\n      const newCurrent = (current + 1) % images.length\n      setCurrent(newCurrent)\n      setIsReversing(false)\n    } else if (direction === \"down\") {\n      const newCurrent = current === 0 ? images.length - 1 : current - 1\n      setCurrent(newCurrent)\n      setIsReversing(true)\n    }\n  }\n\n  const transitions = useTransition([current], item => item, {\n    from: {\n      transform: !isReversing ? \"translate(200%, 0)\" : \"translate(-200%, 0)\",\n    },\n    enter: { transform: \"translate(0, 0)\" },\n    leave: { position: \"absolute\" },\n  })\n\n  return (\n    <Container>\n      {transitions.map(({ item, props, key }) => (\n        <a.div key={key} style={props}>\n          <ImageContainer>\n            <Img fluid={images[item].childImageSharp.fluid} />\n          </ImageContainer>\n        </a.div>\n      ))}\n      <ArrowsContainer>\n        <div className=\"Arrows\">\n          <div className=\"Carousel__arrow\" onClick={() => handleClick(\"down\")}>\n            {\"<\"}\n          </div>\n          <div className=\"Carousel__arrow\" onClick={() => handleClick(\"up\")}>\n            {\">\"}\n          </div>\n        </div>\n      </ArrowsContainer>\n    </Container>\n  )\n}\n\nexport default Carousel\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport Img from \"gatsby-image\"\nimport { useTransition, animated as a } from \"react-spring\"\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport { useDeviceDetect } from \"../utils/useDeviceDetect\"\nimport Link from \"gatsby-plugin-transition-link/AniLink\"\nimport eye from \"../images/eye.png\"\nimport info from \"../images/info.png\"\nimport Carousel from \"./carousel\"\n\n// template page generated automatically for each work\n\ntype WorkViewProps = {\n  data: any\n}\n\nconst Container = styled.div`\n  h1 {\n    font-size: 96px;\n    font-weight: 400;\n  }\n\n  h2 {\n    font-size: 72px;\n    font-weight: 400;\n  }\n  @media only screen and (max-width: 1000px) {\n    margin-top: 150px;\n  }\n`\nconst Info = styled(a.div)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  p {\n    max-width: 540px;\n  }\n\n  .AddInfo {\n    p {\n      padding: 0;\n      margin: 0;\n    }\n  }\n`\n\nconst MoreInfoButton = styled.div`\n  position: fixed;\n  right: 50px;\n  bottom: 20px;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  transition: all 0.3s;\n  height: 50px;\n  width: 50px;\n\n  img {\n    height: 60px;\n  }\n\n  .info-icon {\n    height: 100px;\n  }\n`\n\nconst WorkView = (props: WorkViewProps) => {\n  const {\n    title,\n    description,\n    images,\n    slug,\n    additionalInfo,\n  } = props.data.worksJson\n  const [isShowInfo, setIsShowInfo] = useState(false)\n  const { isMobile } = useDeviceDetect()\n\n  const transitions = useTransition(isShowInfo, null, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n  })\n\n  const pageTitle = slug.split(\"/\")[0].split(\"-\")[0]\n\n  console.log(images)\n  console.log(additionalInfo)\n\n  return (\n    <Layout>\n      <Container>\n        <SEO title={pageTitle} />\n        <h1>{title}</h1>\n        <Carousel images={images} />\n        <Info>\n          <p>{description}</p>\n          <h2>Description</h2>\n        </Info>\n        {additionalInfo && (\n          <Info>\n            <h2>Additional</h2>\n            <div className=\"AddInfo\">\n              {additionalInfo.split(\"\\n\").map((line, i) => (\n                <p key={i}>{line}</p>\n              ))}\n            </div>\n          </Info>\n        )}\n      </Container>\n    </Layout>\n  )\n}\n\nexport default WorkView\n\nexport const query = graphql`\n  query workQ($id: String!) {\n    worksJson(id: { eq: $id }) {\n      title\n      slug\n      description\n      additionalInfo\n      images {\n        childImageSharp {\n          fluid(maxWidth: 1440) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}